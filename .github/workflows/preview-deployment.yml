name: Preview Deployment

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Custom image tag (optional, defaults to commit SHA)'
        required: false
        type: string

env:
  ECS_CLUSTER: production-cluster
  ECS_SERVICE: nickpage-tech

permissions:
  id-token: write
  contents: read

jobs:
  preview:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Display deployment info
        run: |
          echo "🔍 Preview deployment for:"
          echo "📦 Branch: ${{ github.ref_name }}"
          echo "🏷️ Commit: ${{ github.sha }}"
          echo "🏷️ Image tag: ${{ github.event.inputs.image_tag || github.sha }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-nickpage-tech-deploy
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        timeout-minutes: 5

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nickpage-tech
          IMAGE_TAG: ${{ github.event.inputs.image_tag || github.sha }}
        run: |
          echo "🔨 Building Docker image..."

          # Build images (same as existing deploy.yml)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          echo "📤 Pushing images to ECR..."

          # Push images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "✅ Images pushed successfully!"
          echo "🏷️ Tagged as: $IMAGE_TAG and latest"

      - name: Generate and preview new task definition
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nickpage-tech
          IMAGE_TAG: ${{ github.event.inputs.image_tag || github.sha }}
        run: |
          echo "🔍 Generating new task definition preview..."

          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $ECS_SERVICE --query taskDefinition)

          # Update image in task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$IMAGE_URI" '.containerDefinitions[1].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')

          echo ""
          echo "📋 CURRENT vs NEW Task Definition Comparison"
          echo "═══════════════════════════════════════════════════════════════"

          # Extract key information from current
          CURRENT_FAMILY=$(echo $TASK_DEFINITION | jq -r '.family')
          CURRENT_REVISION=$(echo $TASK_DEFINITION | jq -r '.revision')

          echo "Family: $CURRENT_FAMILY"
          echo "Current Revision: $CURRENT_REVISION"
          echo "Next Revision: $((CURRENT_REVISION + 1)) (would be created)"
          echo ""

          echo "🐳 Container Image Changes:"
          echo "═══════════════════════════════════════════════════════════════"

          # Display each container and highlight changes
          CONTAINER_COUNT=$(echo $TASK_DEFINITION | jq '.containerDefinitions | length')

          for i in $(seq 0 $((CONTAINER_COUNT - 1))); do
            NAME=$(echo $TASK_DEFINITION | jq -r ".containerDefinitions[$i].name")
            CURRENT_IMAGE=$(echo $TASK_DEFINITION | jq -r ".containerDefinitions[$i].image")
            NEW_IMAGE=$(echo $NEW_TASK_DEFINITION | jq -r ".containerDefinitions[$i].image")

            echo "[$i] $NAME"
            if [ "$CURRENT_IMAGE" != "$NEW_IMAGE" ]; then
              echo "    ❌ CURRENT: $CURRENT_IMAGE"
              echo "    ✅ NEW:     $NEW_IMAGE"
              echo "    🔄 CHANGE DETECTED!"
            else
              echo "    ⚪ UNCHANGED: $CURRENT_IMAGE"
            fi
            echo ""
          done

          echo "📄 Complete New Task Definition:"
          echo "═══════════════════════════════════════════════════════════════"
          echo "$NEW_TASK_DEFINITION" | jq '.'

          echo ""
          echo "🚀 This task definition would be deployed to:"
          echo "   Cluster: $ECS_CLUSTER"
          echo "   Service: $ECS_SERVICE"
          echo ""
          echo "💡 To actually deploy this, use the 'Manual Deploy to ECS' workflow"