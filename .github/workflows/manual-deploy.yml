name: Manual Deploy to ECS

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy (skip safety checks)'
        required: false
        type: boolean
        default: false
      image_tag:
        description: 'Custom image tag (optional, defaults to commit SHA)'
        required: false
        type: string

env:
  ECS_CLUSTER: production-cluster
  ECS_SERVICE: nickpage-tech

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Display deployment info
        run: |
          echo "üöÄ Manual deployment triggered"
          echo "üì¶ Branch: ${{ github.ref_name }}"
          echo "üè∑Ô∏è Commit: ${{ github.sha }}"
          echo "‚ö° Force deploy: ${{ github.event.inputs.force_deploy }}"
          echo "üè∑Ô∏è Image tag: ${{ github.event.inputs.image_tag || github.sha }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-nickpage-tech-deploy
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        timeout-minutes: 5

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nickpage-tech
          IMAGE_TAG: ${{ github.event.inputs.image_tag || github.sha }}
        run: |
          echo "üî® Building Docker image..."

          # Build images (same as existing deploy.yml)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          echo "üì§ Pushing images to ECR..."

          # Push images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "‚úÖ Images pushed successfully!"
          echo "üè∑Ô∏è Tagged as: $IMAGE_TAG and latest"

      - name: Deploy to ECS
        timeout-minutes: 15
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nickpage-tech
          IMAGE_TAG: ${{ github.event.inputs.image_tag || github.sha }}
        run: |
          echo "üöÄ Starting ECS deployment..."

          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $ECS_SERVICE --query taskDefinition)

          # Update image in task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$IMAGE_URI" '.containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.placementConstraints) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')

          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION" --query taskDefinition.taskDefinitionArn --output text)

          echo "üìù Registered new task definition: $NEW_TASK_DEF_ARN"

          # Update service
          echo "üîÑ Updating ECS service..."
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TASK_DEF_ARN

          # Wait for deployment with timeout handling
          echo "‚è≥ Waiting for deployment to complete (timeout: 15 minutes)..."

          # Use timeout command to limit wait time
          if timeout 900 aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE; then
            echo "‚úÖ ECS deployment completed successfully!"
          else
            echo "‚è∞ Deployment timed out after 15 minutes"
            echo "üõë Cancelling deployment and rolling back..."

            # Get the previous task definition (rollback target)
            PREVIOUS_TASK_DEF=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].deployments[?status==`PRIMARY`] | [0].taskDefinition' --output text)

            if [ "$PREVIOUS_TASK_DEF" != "None" ] && [ "$PREVIOUS_TASK_DEF" != "" ]; then
              echo "üîÑ Rolling back to previous task definition: $PREVIOUS_TASK_DEF"
              aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $PREVIOUS_TASK_DEF

              echo "‚è≥ Waiting for rollback to complete..."
              if timeout 300 aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE; then
                echo "‚úÖ Rollback completed successfully"
              else
                echo "‚ö†Ô∏è Rollback is taking longer than expected"
              fi
            else
              echo "‚ö†Ô∏è Could not determine previous task definition for rollback"
            fi

            echo "‚ùå Deployment cancelled due to timeout"
            exit 1
          fi

      - name: Verify deployment
        timeout-minutes: 5
        run: |
          echo "üîç Verifying deployment status..."

          # Get service status
          SERVICE_STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].deployments[?status==`PRIMARY`] | [0]')

          RUNNING_COUNT=$(echo $SERVICE_STATUS | jq -r '.runningCount')
          DESIRED_COUNT=$(echo $SERVICE_STATUS | jq -r '.desiredCount')

          echo "üìä Service status:"
          echo "   Running tasks: $RUNNING_COUNT"
          echo "   Desired tasks: $DESIRED_COUNT"

          if [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ]; then
            echo "‚úÖ All tasks are running successfully"
          else
            echo "‚ö†Ô∏è Warning: Running count ($RUNNING_COUNT) != Desired count ($DESIRED_COUNT)"
            exit 1
          fi

      - name: Deployment summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ ECS deployment completed successfully"
          elif [ "${{ job.status }}" == "cancelled" ]; then
            echo "‚èπÔ∏è Deployment was cancelled"
          else
            echo "‚ùå Deployment failed"
          fi